// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: mafia.proto

package mafia

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Mafia_Register_FullMethodName       = "/reverse.Mafia/Register"
	Mafia_GetWaitingRoom_FullMethodName = "/reverse.Mafia/GetWaitingRoom"
	Mafia_Vote_FullMethodName           = "/reverse.Mafia/Vote"
	Mafia_Kill_FullMethodName           = "/reverse.Mafia/Kill"
	Mafia_Search_FullMethodName         = "/reverse.Mafia/Search"
	Mafia_FinishDay_FullMethodName      = "/reverse.Mafia/FinishDay"
)

// MafiaClient is the client API for Mafia service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MafiaClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (Mafia_RegisterClient, error)
	GetWaitingRoom(ctx context.Context, in *GetWaitingRequest, opts ...grpc.CallOption) (*GetWaitingResponse, error)
	Vote(ctx context.Context, in *GameRequest, opts ...grpc.CallOption) (*GameResponse, error)
	Kill(ctx context.Context, in *GameRequest, opts ...grpc.CallOption) (*GameResponse, error)
	Search(ctx context.Context, in *GameRequest, opts ...grpc.CallOption) (*GameResponse, error)
	FinishDay(ctx context.Context, in *GameRequest, opts ...grpc.CallOption) (*GameResponse, error)
}

type mafiaClient struct {
	cc grpc.ClientConnInterface
}

func NewMafiaClient(cc grpc.ClientConnInterface) MafiaClient {
	return &mafiaClient{cc}
}

func (c *mafiaClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (Mafia_RegisterClient, error) {
	stream, err := c.cc.NewStream(ctx, &Mafia_ServiceDesc.Streams[0], Mafia_Register_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &mafiaRegisterClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Mafia_RegisterClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type mafiaRegisterClient struct {
	grpc.ClientStream
}

func (x *mafiaRegisterClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mafiaClient) GetWaitingRoom(ctx context.Context, in *GetWaitingRequest, opts ...grpc.CallOption) (*GetWaitingResponse, error) {
	out := new(GetWaitingResponse)
	err := c.cc.Invoke(ctx, Mafia_GetWaitingRoom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mafiaClient) Vote(ctx context.Context, in *GameRequest, opts ...grpc.CallOption) (*GameResponse, error) {
	out := new(GameResponse)
	err := c.cc.Invoke(ctx, Mafia_Vote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mafiaClient) Kill(ctx context.Context, in *GameRequest, opts ...grpc.CallOption) (*GameResponse, error) {
	out := new(GameResponse)
	err := c.cc.Invoke(ctx, Mafia_Kill_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mafiaClient) Search(ctx context.Context, in *GameRequest, opts ...grpc.CallOption) (*GameResponse, error) {
	out := new(GameResponse)
	err := c.cc.Invoke(ctx, Mafia_Search_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mafiaClient) FinishDay(ctx context.Context, in *GameRequest, opts ...grpc.CallOption) (*GameResponse, error) {
	out := new(GameResponse)
	err := c.cc.Invoke(ctx, Mafia_FinishDay_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MafiaServer is the server API for Mafia service.
// All implementations must embed UnimplementedMafiaServer
// for forward compatibility
type MafiaServer interface {
	Register(*RegisterRequest, Mafia_RegisterServer) error
	GetWaitingRoom(context.Context, *GetWaitingRequest) (*GetWaitingResponse, error)
	Vote(context.Context, *GameRequest) (*GameResponse, error)
	Kill(context.Context, *GameRequest) (*GameResponse, error)
	Search(context.Context, *GameRequest) (*GameResponse, error)
	FinishDay(context.Context, *GameRequest) (*GameResponse, error)
	mustEmbedUnimplementedMafiaServer()
}

// UnimplementedMafiaServer must be embedded to have forward compatible implementations.
type UnimplementedMafiaServer struct {
}

func (UnimplementedMafiaServer) Register(*RegisterRequest, Mafia_RegisterServer) error {
	return status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedMafiaServer) GetWaitingRoom(context.Context, *GetWaitingRequest) (*GetWaitingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWaitingRoom not implemented")
}
func (UnimplementedMafiaServer) Vote(context.Context, *GameRequest) (*GameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Vote not implemented")
}
func (UnimplementedMafiaServer) Kill(context.Context, *GameRequest) (*GameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Kill not implemented")
}
func (UnimplementedMafiaServer) Search(context.Context, *GameRequest) (*GameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedMafiaServer) FinishDay(context.Context, *GameRequest) (*GameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishDay not implemented")
}
func (UnimplementedMafiaServer) mustEmbedUnimplementedMafiaServer() {}

// UnsafeMafiaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MafiaServer will
// result in compilation errors.
type UnsafeMafiaServer interface {
	mustEmbedUnimplementedMafiaServer()
}

func RegisterMafiaServer(s grpc.ServiceRegistrar, srv MafiaServer) {
	s.RegisterService(&Mafia_ServiceDesc, srv)
}

func _Mafia_Register_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RegisterRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MafiaServer).Register(m, &mafiaRegisterServer{stream})
}

type Mafia_RegisterServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type mafiaRegisterServer struct {
	grpc.ServerStream
}

func (x *mafiaRegisterServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

func _Mafia_GetWaitingRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWaitingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MafiaServer).GetWaitingRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mafia_GetWaitingRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MafiaServer).GetWaitingRoom(ctx, req.(*GetWaitingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mafia_Vote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MafiaServer).Vote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mafia_Vote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MafiaServer).Vote(ctx, req.(*GameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mafia_Kill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MafiaServer).Kill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mafia_Kill_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MafiaServer).Kill(ctx, req.(*GameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mafia_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MafiaServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mafia_Search_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MafiaServer).Search(ctx, req.(*GameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mafia_FinishDay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MafiaServer).FinishDay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mafia_FinishDay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MafiaServer).FinishDay(ctx, req.(*GameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Mafia_ServiceDesc is the grpc.ServiceDesc for Mafia service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Mafia_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "reverse.Mafia",
	HandlerType: (*MafiaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWaitingRoom",
			Handler:    _Mafia_GetWaitingRoom_Handler,
		},
		{
			MethodName: "Vote",
			Handler:    _Mafia_Vote_Handler,
		},
		{
			MethodName: "Kill",
			Handler:    _Mafia_Kill_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _Mafia_Search_Handler,
		},
		{
			MethodName: "FinishDay",
			Handler:    _Mafia_FinishDay_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Register",
			Handler:       _Mafia_Register_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "mafia.proto",
}
